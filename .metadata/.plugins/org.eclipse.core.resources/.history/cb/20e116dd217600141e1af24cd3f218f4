package fi.metropolia.challengedemo;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.os.AsyncTask;
import android.util.Log;

public class AsyncCompleteChallenge extends AsyncTask<Integer, Integer, String> {
    public AsyncResponse delegate=null;
    AsyncResponse listener;
    private int userId, challId;
    
 

    @Override
    protected String doInBackground(Integer... params) {
        // TODO Auto-generated method stub
    	setUserId(params[0]);
    	setChallId(params[1]);
    	
        postData(userId);
        
        String complete = "Task completed!";
        return complete;
    }

    protected void onPostExecute(String result) {
        listener.taskComplete(result);
    }




    public int getUserId() {
		return userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	public int getChallId() {
		return challId;
	}

	public void setChallId(int challId) {
		this.challId = challId;
	}

	public void postData(int valueIWantToSend) {
        // Create a new HttpClient and Post Header
        HttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(
                "http://10.0.2.2:8080/ChallengeAcceptedBackEnd/HandlerServlet");
        Log.d("HTTP POST", "I CREATED A POST");
        String postUser = Integer.toString(valueIWantToSend);
        String postChall = Integer.toString(challId);
        Log.d("HTTP POST", postUser);
        try {
            // Add your data
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
            nameValuePairs.add(new BasicNameValuePair("method",
            		Integer.toString(valueIWantToSend)));
            
                nameValuePairs.add(new BasicNameValuePair("User", postUser));
                nameValuePairs.add(new BasicNameValuePair("Challenge", postChall ));
            
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

            // Execute HTTP Post Request
            HttpResponse response = httpclient.execute(httppost);
            Log.d("HTTP POST", "SENT THE POST");

            Header reply = response.getFirstHeader("backEnd") ;
            if(reply !=null){
                String postReply = reply.getValue();
                Log.d("HTTP RESPONSE",  postReply);


                if(response.containsHeader("users")){
                    usersList = new ArrayList<Users>();
                    for(int i=0; i < Integer.parseInt(response.getFirstHeader("itemCount").getValue()); i++){
                        userId = Integer.parseInt(response.getFirstHeader("uId"+Integer.toString(i)).getValue());
                        totalPoints = Integer.parseInt(response.getFirstHeader("uTotPoints"+Integer.toString(i)).getValue());
                        currentChallenge = Integer.parseInt(response.getFirstHeader("uCurrentChallenge"+Integer.toString(i)).getValue());
                        userName = response.getFirstHeader("uName"+Integer.toString(i)).getValue();
                        active = Boolean.valueOf(response.getFirstHeader("uActive"+Integer.toString(i)).getValue());
                        notified = Boolean.valueOf(response.getFirstHeader("uNotif"+Integer.toString(i)).getValue());


                        Users newUser = new Users(userId, totalPoints, currentChallenge, userName, active, notified);
                        usersList.add(newUser);
                        Log.d("USERS",   userName +"ID: "
                                +Integer.toString(userId) +", Total Points: "
                                + Integer.toString(totalPoints) +", CurrentChallengeID: "
                                + Integer.toString(currentChallenge) +", Active? "
                                + Boolean.toString(active) +", Notified? "
                                + Boolean.toString(notified));
                    }


                    Log.d("USERS RECEIVED", response.getFirstHeader("users").getValue());

                }
                else if(response.containsHeader("challenges")){
                    challengesList = new ArrayList<Challenges>();
                    for(int i=0; i < Integer.parseInt(response.getFirstHeader("itemCount").getValue()); i++){
                        challId = Integer.parseInt(response.getFirstHeader("cId"+Integer.toString(i)).getValue());
                        challName = response.getFirstHeader("cName"+Integer.toString(i)).getValue();
                        challDesc = response.getFirstHeader("cDesc"+Integer.toString(i)).getValue();
                        challPoints =Integer.parseInt(response.getFirstHeader("cPoints"+Integer.toString(i)).getValue());
                        Log.d("CHALLENGES",   challName +" ID "+ Integer.toString(challId) +" DESCRIPTION "+ challDesc + " POINTS " + challPoints );


                        Challenges nChallenges = new Challenges(challId, challPoints , challName , challDesc );
                        challengesList.add(nChallenges);

                    }

                }
                else if(response.containsHeader("challChecker")){
                    userId = Integer.parseInt(response.getFirstHeader("checkUser").getValue());
                    active = Boolean.valueOf(response.getFirstHeader("checker").getValue());
                    Log.d("CHECKER",   userId +" challenge status: "+ Boolean.toString(active));
                }

                else if(response.containsHeader("trueStory")){
                    accepted = response.getFirstHeader("trueStory").getValue();
                    Log.d("CAN YOU DO IT?", accepted);
                }



                else{
                    Log.d("HTTP RESPONSE", "NO VALID RESPONSE METHOD");
                }




            }


            else{
                Log.d("HTtP RESPONSE", "NO RESPONSE HEADERS");

            }




        } catch (ClientProtocolException e) {
            // TODO Auto-generated catch block
        	Log.d("POST FAIL", "NO POST SENT CLIENTPROTOCOL");
        } catch (IOException e) {
            // TODO Auto-generated catch block
        	Log.d("POST FAIL", "NO POST SENT IOEXCEPTION");
        }






    } 
	
}
